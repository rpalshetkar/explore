def cls2py_old(self, cls_id: str) -> str:
    cls = self.classes.get(cls_id.lower())
    if cls is None:
        raise ValueError(f'Class {cls_id} not found.')

    fields = attr.fields(cls)
    ic(fields)
    ic(self.classes)

    class_string = '\n@attr.s\n'
    class_string += f'class {cls_id}:\n'

    nested_fields = {}
    prefix = '    '
    for attr_value in fields:
        attr_type = attr_value.type
        name = attr_value.name
        if name in self.classes:
            nested_fields[f'{cls_id}.{name}'] = attr.fields(attr_type)
        if name == 'kind':
            class_string += f'{prefix}{name}: str = "{cls_id}"\n'
        elif hasattr(attr_type, '__name__'):
            class_string += f'{prefix}{name}: {attr_type.__name__}\n'
        else:
            class_string += f'{prefix}{name}: {attr_type}\n'
    ic(nested_fields)
    class_string += '\n'
    init_string = f'\n{prefix}def __init__(self, **kwargs):\n'
    prefix = prefix * 2
    for attr_value in fields:
        name = attr_value.name
        if name == 'kind':
            continue
        if attr_value.type in self.classes.values():
            _ = self.cls2py(name)
            nfields = nested_fields[f'{cls_id}.{name}']
            init_string += (
                '\n'.join(
                    [
                        f'{prefix}self.{name}.{fld.name} = kwargs.get("{name}.{fld.name}", None)'
                        for fld in nfields
                    ]
                )
                + '\n'
            )
        else:
            init_string += f'{prefix}self.{name} = kwargs.get("{name}", None)\n'

    class_string += init_string
    self.py[cls_id.lower()] = class_string
    print(class_string)
    return class_string



def _from_spec(self, spec: Dict[str, Any], class_name: str) -> Any:
    class_attrs = {}
    for field, field_spec in spec.items():
        if isinstance(field_spec, dict) and 'type' in field_spec:
            field_type = field_spec['type']
            is_optional = field_spec.get('optional', False)

            if field_type == 'object':
                if 'kind' in field_spec:
                    nested_class = self._from_spec(
                        field_spec['properties'], field_spec['kind']
                    )
                else:
                    nested_class = self._from_spec(
                        field_spec['properties'], f'{class_name}_{field}'
                    )
                attr_type = Optional[nested_class] if is_optional else nested_class
            else:
                attr_type = {
                    'str': str,
                    'int': int,
                    'float': float,
                    'bool': bool,
                    'list': list,
                    'dict': dict,
                }.get(field_type, Any)

                if is_optional:
                    attr_type = Optional[attr_type]

            class_attrs[field] = attr.ib(
                type=attr_type, default=None if is_optional else attr.NOTHING
            )
        else:
            class_attrs[field] = attr.ib(type=Any)

    return attr.make_class(class_name, class_attrs)


    def _cls2py(self, cls_id: str) -> str:
        # TODO: To create strong statically typed classes
        # TODO: Need to discuss better way to have members defined in yaml but
        # TODO: concrete implementations in concrete classes. Like DS members defined in yaml
        # TODO: but members/methods more unique processing in DS classes
        # TODO: Separate data model from logical extension to the class
        # TODO: This is not perfect. Recursive multiple levels doesn't work. Just two
        # TODO: levels of generation works especially for __init__ function
        # TODO: Need to figure out better way
        self.py_jtmpl = io_stream(Path('xds/catalogue/templates/classgen.jinja2'))
        cls = self.classes.get(cls_id)
        if cls is None:
            raise ValueError(f'Class {cls_id} not found.')

        fields = attr.fields(cls)
        ic(fields)
        fields_data = [
            self._extract_field_info(attr_value, cls_id) for attr_value in fields
        ]

        for field in fields_data:
            if field['is_nested']:
                field['subfields'] = self._get_subfields(field['type'])

        py_tmpl = Template(self.py_jtmpl)
        rendered_code = py_tmpl.render(cls_id=cls_id, fields=fields_data)
        self.py[cls_id] = rendered_code
        return rendered_code

    def _get_subfields(self, attr_type) -> List[Dict[str, Any]]:
        subfields_data = [
            self._extract_field_info(sub_attr) for sub_attr in attr.fields(attr_type)
        ]
        return subfields_data

    def _extract_field_info(self, attr_value, cls_id=None) -> Dict[str, Any]:
        attr_type = attr_value.type
        name = attr_value.name
        is_nested = name in self.classes
        subfields = []
        if is_nested:
            subfields = self._get_subfields(attr_type)

        return {
            'name': name,
            'type': attr_type.__name__ if hasattr(attr_type, '__name__') else attr_type,
            'default': cls_id if cls_id and name == 'kind' else None,
            'is_nested': is_nested,
            'subfields': subfields,
        }